.. _top-mpas-jedi-testing:

.. _testing-mpas:

Testing
=======

MPAS-JEDI comes with an extensive suite of ctests. These tests are designed to ensure as much as
possible of the source code is regularly exercised, and that generic applications used in larger
scale experiments are tested. Testing is an integral aspect of the development and experiment
process. It is recommended that the tests are run every time the code is
:doc:`built </inside/jedi-components/mpas-jedi/build>`. Developers working on a new feature in the
MPAS-JEDI repository should ensure that all existing tests pass before submitting a pull request
to github. We also request that some attempt is made to ensure that new code is exercised by
an existing test or a new test. There are exceptions for code that is exercised extensively and
continually in cycling experiments with verification, and for diagnostic tools that are not
automatically tested yet.

.. _ci-mpas:

Continuous integration
----------------------

MPAS-JEDI is instrumented with a continuous integration (CI) suite running on Amazon Web Services.
Each time a pull request is issued against the :code:`develop` branch in the JCSDA-internal repository, the MPAS-JEDI
part of the MPAS-BUNDLE package is built with Intel, GNU, and Clang compilers. Then all the
MPAS-JEDI ctests are executed. A failure of any of the ctests blocks the pull request from being
merged. At this time, MPAS-JEDI is not instrumented with a code coverage report.

.. _addtest-mpas:

Adding a test to MPAS-JEDI
--------------------------

It is preferable that new code added to the MPAS-JEDI and MPAS-Model repositories used in
MPAS-BUNDLE is automatically tested in the standard set of ctests. This ensures that future
modifications to either of those two repositories, or to the respositories on which MPAS-JEDI
depends (i.e., OOPS, SABER, IODA, UFO, CRTM), do not break existing functionalities that are
critical to users' scientific experiments.

All the testing in MPAS-JEDI is controlled through :code:`mpasjedi/test/CMakeLists.txt`. There are
two kinds of ctests in JEDI. The first is a so-called interface test. These kinds of tests exercise
individual methods (units) in each class. It might have an exact expected result or allow for results to
vary within some tolerance. Secondly, there are application tests, where a generic application is
executed. Each application test has a reference log file that is compared with the actual output,
usually with some tolerance to allow for small differences.

To simplify adding tests to MPAS-JEDI, two macro functions are provided; :code:`jedi_unit_test`
adds a new unit test and :code:`jedi_app_ref_test_compare` adds a new application test. The reader
is referred to :code:`mpasjedi/test/CMakeLists.txt`, where there are numerous examples for both.
Take note that the name of the yaml and reference files must match the name of the ctest. E.g.,
:code:`test_mpasjedi_forecast` uses the configuration stored in
:code:`mpasjedi/test/testinput/forecast.yaml` and is compared to the reference stored in
:code:`mpasjedi/test/testoutput/forecast.ref`.

Application tests first run the application, then they run a Python script located in the build
directory at :code:`bin/compare.py`. The script compares prints from :code:`oops::Log::test()` to
a reference generated by executing the same application. When developing a new test, the output and
the reference are identical. The output may by slightly different for other users on differently
configured systems.  The :code:`DEFAULT_FLOAT_TOL` and :code:`INT_TOL` parameters provide limits on
differences for most tests. :code:`FORECAST_FLOAT_TOL` provides the limit for ctests that include a
time integration in the Model class.

If a large change is being made to one of the repositories in MPAS-BUNDLE that causes the reference
values of many tests change, it is useful to use the :code:`RECALIBRATE_CTEST_REFS` option in
:code:`mpasjedi/test/CMakeLists.txt`.

.. TODO: add tiered testing to build process, then document here

.. _mmmtest:

Additional automated testing in MMM/PARC
----------------------------------------

There are two additional testing mechanisms in place within MMM/PARC that provide more
automated test coverage.

(1) A daily cron job builds the :code:`JCSDA-internal/mpas-bundle::develop` branch, then runs the
standard ctest suite. This ensures that recent changes merged in other repositories have not broken
MPAS-BUNDLE.

(2) A weekly cron job builds the :code:`JCSDA-internal/mpas-bundle::develop` branch, then runs a
multi-day 120 km cycling experiment. The experiment uses 3DEnVar to assimilate conventional
observations (sondes, aircraft, gnssro refractivity, satwind, surface pressure) and AMSUA clear-sky
radiances (aqua, noaa-15, noaa-18, noaa-19, metop-a, metop-b). The results are automatically
analyzed for statistical comparison to GFS analyses, although the figures are inspected manually.
This test ensures that the MPAS-BUNDLE performance does not diverge far from a benchmark.
